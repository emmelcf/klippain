[include tool_calibration.cfg]
[include tool_detection.cfg]
[include liftbar.cfg]

[gcode_macro _TOOLCHANGER_SAVE_CURRENT_TOOL]
gcode:
  {% set active_tool = printer.toolhead.tool_current %}
  SET_GCODE_VARIABLE MACRO=_TOOLCHANGER_RESTORE_TOOLHEAD_STATE VARIABLE=active_tool VALUE={active_tool}

[gcode_macro _TOOLCHANGER_RESTORE_CURRENT_TOOL]
gcode:
  {% if printer['gcode_macro _TOOLCHANGER_RESTORE_TOOLHEAD_STATE'].active_tool is defined %}
    T{printer['gcode_macro _TOOLCHANGER_RESTORE_TOOLHEAD_STATE'].active_tool}
  {% endif %}

[gcode_macro _TOOLCHANGER_G28_STORE_TOOLHEAD_STATE]
gcode:
  {% if printer.config.has_section('toolchanger') %}
    _TOOLCHANGER_SAVE_CURRENT_TOOL
  {% endif %}

[gcode_macro _TOOLCHANGER_G28_RESTORE_TOOLHEAD_STATE]
gcode:
  {% if printer.config.has_section('toolchanger') %}
    _TOOLCHANGER_RESTORE_CURRENT_TOOL
  {% endif %}

[gcode_macro _INITIALIZE_FROM_DETECTED_TOOL]
gcode:
  {% if printer.tool_probe_endstop.active_tool_number | int == -1 %}
    RESPOND TYPE=error MSG='Failed to detect active tool'
    PAUSE
  {% else %}
    { action_respond_info('initialize from detected tool')}
    INITIALIZE_TOOLCHANGER T={printer.tool_probe_endstop.active_tool_number}
    { action_respond_info('finished initializing from detected tool')}
  {% endif %}

[gcode_macro TOOL_ALIGN_START]
gcode:
    INITIALIZE_TOOLCHANGER # Detect current tool
    BED_MESH_CLEAR
    _TOOL_ALIGN_START

[gcode_macro _TOOL_ALIGN_START]
gcode:
    {% set tool = printer[printer.toolchanger.tool] %}
    SET_TOOL_PARAMETER PARAMETER='params_path_speed' VALUE=300
    SET_GCODE_OFFSET X=0 Y=0 Z=0
    G0 Y{tool.params_safe_y} F{tool.params_fast_speed}
    G0 X{tool.params_park_x} Z{tool.params_z_lift}
    LIFTBAR_MOVE Z={tool.params_park_z}
    G0 Y{tool.params_park_y|float + 100.0}

[gcode_macro TOOL_ALIGN_TEST]
gcode:
    {% set tool = printer[printer.toolchanger.tool] %}
    {% set curpos = printer.gcode_move.gcode_position %}
    {% set lifbar_z = printer['gcode_macro LIFTBAR_MOVE'].position %}
    {% if curpos[1] > 30 %}
      # Check if Y is not too far, to very unrealistic tests.
      RESPOND TYPE=error MSG='Test aborted. Tool too far away from the dock.'
    {% else %}
      INITIALIZE_TOOLCHANGER # Detect current tool
      SET_GCODE_OFFSET X=0 Y=0 Z=0
      SET_TOOL_PARAMETER PARAMETER='params_park_x' VALUE={curpos[0]}
      SET_TOOL_PARAMETER PARAMETER='params_park_y' VALUE={curpos[1]}
      SET_TOOL_PARAMETER PARAMETER='params_park_z' VALUE={lifbar_z}
      TEST_TOOL_DOCKING RESTORE_AXIS=XYZ
      LIFTBAR_MOVE Z={tool.params_park_z}
    {% endif %}

[gcode_macro TOOL_ALIGN_DONE]
gcode:
    {% set tool = printer[printer.toolchanger.tool] %}
    SAVE_TOOL_PARAMETER PARAMETER='params_park_x'
    SAVE_TOOL_PARAMETER PARAMETER='params_park_y'
    SAVE_TOOL_PARAMETER PARAMETER='params_park_z'
    RESET_TOOL_PARAMETER PARAMETER='params_path_speed'
    G0 Y{tool.params_safe_y} F{tool.params_fast_speed}
    LIFTBAR_MOVE Z={tool.params_liftbar_stow_z}

[gcode_macro M104]
rename_existing: M104.1
description: [T<index>] [S<temperature>]
  Set tool temperature.
  T= Tool number, optional. If this parameter is not provided, the current tool is used.
  S= Target temperature
gcode:
  {% if params.T is defined %}
    {% set newparameters = " T="~params.T %}
    {% if params.S is defined %}
      {% set newparameters = newparameters ~ " TARGET="~params.S %}
    {% endif %}
    SET_TOOL_TEMPERATURE{newparameters}
  {% else %}
    M104.1 {rawparams}
  {% endif %}


[gcode_macro M109]
rename_existing: M109.1
description: [T<index>] [S<temperature>]
  Set tool temperature and wait.
  T= Tool number, optional. If this parameter is not provided, the current tool is used.
  S= Target temperature
gcode:
  {% if params.T is defined %}
    {% set newparameters = " T="~params.T %}
    {% if params.S is defined %}
      {% set newparameters = newparameters ~ " TARGET="~params.S %}
    {% endif %}
    SET_TOOL_TEMPERATURE WAIT=1 {newparameters}
  {% else %}
    M109.1 {rawparams}
  {% endif %}

  ; Depending on the selected tool at the time of homing, the physical Z endstop position is offset.
; This corrects for that using current tool offset.
[gcode_macro _ADJUST_Z_HOME_FOR_TOOL_OFFSET]
gcode:
  G90 ; absolute mode
  G0 Z10 F1000
  {% set tool = printer.toolchanger.tool %}
  {% if tool %}
    {% set tool_z_offset = printer[tool].gcode_z_offset %}
    {% set probe_z_offset = printer.tool_probe_endstop.active_tool_probe_z_offset %}
    SET_KINEMATIC_POSITION Z={10.0+tool_z_offset|float+probe_z_offset|float}
  {% endif %}

[gcode_macro _APPLY_ACTIVE_TOOL_GCODE_OFFSETS]
gcode:
  ; Apply gcode offsets
  {% set tool = printer.toolchanger.tool %}
  {% if tool %}
    SET_GCODE_OFFSET X={printer[tool].gcode_x_offset} Y={printer[tool].gcode_y_offset} Z={printer[tool].gcode_z_offset}
  {% endif %}

[gcode_macro TOOL_BED_MESH_CALIBRATE]
gcode:
  {% set tool_z_offset = printer[printer.toolchanger.tool].gcode_z_offset %}
  G90 ; absolute mode
  G0 Z10 F1000
  # Bed mesh knows about the probe offset, but not about the tool offset.
  SET_KINEMATIC_POSITION Z={10.0-tool_z_offset|float}
  BED_MESH_CALIBRATE
  G0 Z10 F1000
  SET_KINEMATIC_POSITION Z={10.0+tool_z_offset|float}